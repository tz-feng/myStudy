静态代码块：用staitc声明，jvm加载类时执行，仅执行一次。
static {//静态代码块    
}

关于静态代码块，要注意的是：

1.它是随着类的加载而执行，只执行一次，并优先于主函数。具体说，静态代码块是由类调用的。类调用时，先执行静态代码块，然后才执行主函数的。
2.静态代码块其实就是给类初始化的，而构造代码块是给对象初始化的。
3.静态代码块中的变量是局部变量，与普通函数中的局部变量性质没有区别。
4.一个类中可以有多个静态代码块

静态变量（成员）：属于全局变量
static xxxx；

构造代码块：类中直接用{}定义，每一次创建对象时执行。
{//构造代码块
}

关于构造代码块，以下几点要注意：

1.构造代码块的作用是给对象进行初始化。
2.对象一建立就运行构造代码块了，而且优先于构造函数执行。这里要强调一下，有对象建立，才会运行构造代码块，类不能调用构造代码块的，而且构造代码块与构造函数的执行顺序是前者先于后者执行。
2.构造代码块与构造函数的区别是：构造代码块是给所有对象进行统一初始化，而构造函数是给对应的对象初始化，因为构造函数是可以多个的，运行哪个构造函数就会建立什么样的对象，但无论建立哪个对象，都会先执行相同的构造代码块。也就是说，构造代码块中定义的是不同对象共性的初始化内容。

变量（成员）：在程序运行期间，随时可能产生一些临时数据，应用程序会将这些数据保存在一些内存单元中，每个内存单元都用一个标识符来标识。
xxxx；

构造函数（分有参无参）：在创建对象时使用
类名(){
}

初始化优先级问题：
执行顺序优先级：静态块>main()>构造块>构造方法

对于静态变量、静态初始化块、变量、初始化块、构造器，它们的初始化顺序依次是（静态变量、静态初始化块）>（变量、初始化块）>构造器。

当涉及到继承时，按照如下顺序执行：
1.执行父类的静态代码块，并初始化父类静态成员变量
2.执行子类的静态代码块，并初始化子类静态成员变量
3.执行父类的构造代码块，执行父类的构造函数，并初始化父类普通成员变量
4.执行子类的构造代码块， 执行子类的构造函数，并初始化子类普通成员变量

什么时候发生类初始化？
（1）类的主动引用（一定会发生类的初始化）
①当虚拟机启动，先初始化main方法所在的类
②new一个类的对象
③调用类的静态成员（除了final常量）和静态方法
④使用java.lang.reflect包的方法对类进行反射调用
⑤当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类	

（2）类的被动引用（不会发生类的初始化）
①当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当子类引用父类的静态变量，不会导致子类初始化
②通过数组定义类引用，不会触发此类的初始化
③引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中）
