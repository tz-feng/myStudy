哈希表：通过关键字来查找其所在位置。先将内容数据化，然后通过哈希函数存储到哈希表中。当查询数据是否存在时，将数据通过哈希函数计算出它可能存在的位置，再将其与该位置中的数据进行比较，若成功，则能达到一次比较就能查找完成的效果。

一、哈希函数：
在一般情况下，需在关键字与记录在表中的存储位置之间建立一个函数关系，以f(key)作为关键字为key的记录在表中的位置，通常称这个函数f(key)为哈希函数。

二、"冲突"现象：
在一般情况下，容易产生"冲突"现象，如key1≠key2，但f(key1)=f(key2)。

三、哈希函数的构造方法：
1.数字分析法
假设关键字集合中的每个关键字都是由S为数字组成(U1,U2,......,US)，分析关键字集合中的全体，并从中提取分布均匀的若干位或它们的组合作为地址。

缺点：必须事先分析统计这组数据。

2.平方取中法
以关键字的平方值的中间几位作为存储地址。

3.折叠法
将关键字分割成若干部分，然后取它们的叠加和为哈希地址。

叠加方法：
①折叠叠加
将分割的部分分为奇偶部分，奇数部分为正序，偶数部分为反序，然后相加得出的值为它的地址。

②移位叠加
直接将分割的部分全部相加，得到的值为它的地址。

4除留余数法（最常用的方法）
H(key) = key MOD p。表长时m，p是<=m的最大素数。

四、哈希处理冲突方法
（1）拉链法：HashMap，HashSet其实都是采用的拉链法来解决哈希冲突的，就是在每个位桶实现的时候，我们采用链表（jdk1.8之后采用链表+红黑树）的数据结构来去存取发生哈希冲突的输入域的关键字（也就是被哈希函数映射到同一个位桶上的关键字）。


（2）开放定址法：
若发生冲突时，将求得的地址加上一个增量，然后再对其进行取余。

增量d的三种取法：
①线性探测再散列
d从1开始，每次失败后d加1，当遍历全表或遇到空位时结束。

②二次探测再散列
d等于1的平方，负的1的平方，2的平方，负的2的平方......

③伪随机探测再散列
d随机生成一个数字。

（3）再散列法：再散列法其实很简单，就是再使用哈希函数去散列一个输入的时候，输出是同一个位置就再次散列，直至不发生冲突位置

当某个关键字存在于哈希表时，若对改关键字使用put(key,value)，则会修改该关键字的值。