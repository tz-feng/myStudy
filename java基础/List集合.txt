一、ArrayList
1、ArrayList是List使用中最常用的实现类，它的查询速度快，效率高，但增删慢，线程不安全。ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。

2、实现原理：
ArrayList底层实现采用的数据结构是数组，并且数组默认大小为10。

3、扩容机制：
jdk1.8的扩容算法：newCapacity = oldCapacity + ( oldCapacity >> 1 ) ；oldCapacity >> 1是移位运算，相当于oldCapacity除以2，但是>>的效率更高。

jdk1.6的扩容算法：newCapacity = ( oldCapacity * 3 ) / 2 +1 。

二、Vector
1、Vector的底层也是通过数组实现的，默认大小也是10。主要特点：查询快，增删慢 ，线程安全，但是效率低。

2、实现原理：
创建对象与ArrayList类似，但有一点不同，它可以设置扩容是容量增长大小。
Vector的三个构造器：
//无参构造
public Vector() {
        this(10);
}

//设置vevtor的容量大小
public Vector(int initialCapacity) {
        this(initialCapacity, 0);
}

//设置vevtor的容量大小以及溢出时的增量
public Vector(int initialCapacity, int capacityIncrement) {
        super();
        if (initialCapacity < 0)
            throw new IllegalArgumentException("Illegal Capacity: "+
                                               initialCapacity);
        this.elementData = new Object[initialCapacity];
        this.capacityIncrement = capacityIncrement;
}
其实前两种构造器最后还是要用到第三个构造器，所以new Vector(); 与 new Vector(10);与 new Vector(10,0); 三个是等同的。

3、扩容机制
jdk1.8的扩容算法：newCapacity = oldCapacity + ( ( capacityIncrement > 0 ) ? capacityIncrement : oldCapacity );如果增量值大于0，那么扩容时直接加上增量的大小；如果不大于0，那么让原容量乘以2。

jdk1.6的扩容算法：newCapacity = ( capacityIncrement > 0 ) ? ( oldCapacity + capacityIncrement ) : (  oldCapacity  * 2 );

1.6与1.8的写法变化不大，但是仔细一分析，就会发现jdk1.6中有使用乘法运算，即 oldCapacity  * 2。 在jdk1.8中换成了加法运算，这是因为乘法的效率是低于加法的，这应该算法的优化。

三、LinkedList
1、LinkedList底层是一个双向链表，它增删快，效率高，但是查询慢，线程不安全。

2、实现原理：
LinkedList的底层实现是链表，所以没有容量大小的定义，只有上个节点，当前节点，下个节点，每个节点都有一个上级节点和一个下级节点。








