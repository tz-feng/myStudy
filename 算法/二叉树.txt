一、树
树：不包含回路的连通无向图（树是一种简单的非线性结构）

树的特性：
1、一棵树中任意两个结点有且仅有唯一的一条路径连通
2、一棵树如果有n个结点，那它一定恰好有n-1条边
3、在一棵树中加一条边将会构成一个回路
4、树中有且仅有一个没有前驱的结点称为根结点

结点：树中的每个点称为结点。

结点的分类：
根结点：没有父结点的结点
叶结点：没有子结点的结点
内部结点：一个结点既不是根结点也不是叶结点
每个结点还有深度，比如上图左边的树的4号结点深度是3（深度是指从根结点到这个结点的层数，根结点为第一层）

二、二叉树
基本概念：
二叉树是一种非线性结构，二叉树是递归定义的，其结点有左右子树之分

二叉树的存储结构：
二叉树通常采用链式存储结构，存储结点由数据域和指针域（指针域：左指针域和右指针域）组成，二叉树的链式存储结构也称为二叉链表，对满二叉树和完全二叉树可按层次进行顺序存储

特点：
1、每个结点最多有两颗子树
2、左子树和右子树是有顺序的，次序不能颠倒
3、即使某结点只有一个子树，也要区分左右子树
4、二叉树可为空，空的二叉树没有结点，非空二叉树有且仅有一个根节点

二叉树中有两种特殊的二叉树：满二叉树、完全二叉树

（1）满二叉树
满二叉树：二叉树中每个内部结点都有存在左子树和右子树（或者说满二叉树所有的叶结点都有同样的深度）
注意：满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树

满二叉树的严格的定义是：一颗深度为h且有2h-1个结点的二叉树

（2）完全二叉树
一棵深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1≤i≤n）的结点与满二叉树中编号为i的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树。

简单的说：除最后一层外，每一层上的节点数均达到最大值。最后一层必须连续的从左向右排。

（3）二叉树相关词语解释
结点的度：结点拥有的子树的数目
叶子结点：度为0的结点（tips：在任意一个二叉树中，度为0的叶子结点总是比度为2的结点多一个）
分支结点：度不为0的结点
树的度：树中结点的最大的度
层次：根结点的层次为1，其余结点的层次等于该结点的双亲结点的层次加1
树的高度：树中结点的最大层次

（4）二叉树基本性质：
性质1：在二叉树的第k层上至多有 2的k-1次方 个结点（k>=1）
性质2：在深度为m的二叉树至多有 2的m次方减1 个结点
性质3：对任意一颗二叉树，度为0的结点（即叶子结点）总是比度为2的结点多一个
性质4：具有n个结点的完全二叉树的深度至少为[log2n]+1，其中[log2n]表示log2n的整数部分

三、二叉树的遍历（先序\中序\后序遍历）
例如：
                    1
          2                 3
    4          5      6         7

（1）先序遍历：首先访问根结点，然后遍历左子树，最后遍历右子树（根->左->右）
	结果：1 2 4 5 3 6 7

（2）中序遍历：首先遍历左子树，然后访问根节点，最后遍历右子树（左->根->右）
	结果：4 2 5 1 6 3 7

（3）后序遍历：首先遍历左子树，然后遍历右子树，最后访问根节点（左->右->根）
	结果：4 5 2 6 7 3 1
总结：先序遍历第一个为根节点，后续遍历最后一个为根节点。中序遍历如果知道根节点的位置，其左边为左子树，右边为右子树。

四、二叉查找树（二叉搜索树，二叉排序树）
二叉查找树（Binary Search Tree），它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。

在二叉搜索树中：
1.若任意结点的左子树不空，则左子树上所有结点的值均不大于它的根结点的值。
2. 若任意结点的右子树不空，则右子树上所有结点的值均不小于它的根结点的值。
3.任意结点的左、右子树也分别为二叉搜索树。

二叉查找树的遍历（先序\中序\后序遍历）
例如：
                    4
          2                  6
    1          3      5         7

（1）先序遍历：首先访问根结点，然后遍历左子树，最后遍历右子树（根->左->右）
	结果：4 2 1 3 6 5 7

（2）中序遍历：首先遍历左子树，然后访问根节点，最后遍历右子树（左->根->右）
	结果：1 2 3 4 5 6 7

（3）后序遍历：首先遍历左子树，然后遍历右子树，最后访问根节点（左->右->根）
	结果：1 3 2 5 7 6 4
总结：先序遍历第一个为根节点，后续遍历最后一个为根节点。中序遍历如果知道根节点的位置，其左边为左子树，右边为右子树。另外，数值小于根节点的为左子树，大于根节点的为右子树。

五、平衡二叉树
平衡二叉树：它或者是一颗空树，或者具有以下性质的二叉排序树：它的左子树和右子树的深度之差(平衡因子)的绝对值不超过1，且它的左子树和右子树都是一颗平衡二叉树。

平衡因子：将二叉树上节点的左子树高度减去右子树高度的值称为该节点的平衡因子BF(Balance Factor)。

最小不平衡子树：距离插入节点最近的，且平衡因子的绝对值大于1的节点为根的子树.。

平衡二叉树的平衡调整：
1.LL型调整：由于在A的左孩子B(L)的左子树(L)上插入新结点C，使原来平衡二叉树变得不平衡，此时A的平衡因子由1增至2。为了使树达到平衡，将B的右孩子接到A的左子树，将A接到B的右子树即可。
                    A                                                 B
          B                AR     --------->       C                   A
    C        BR                                      CL   CR         BR   AR
CL   CR
2.RR型调整：由于在A的右孩子B(R)的右子树(R)上插入新结点C，使原来平衡二叉树变得不平衡，此时A的平衡因子由-1变为-2。为了使树达到平衡，将B的左孩子接到A的右子树，将A接到B的左子树即可。
              A                                                               B
  AL                      B              ---------->       A                   C
                     BL         C                            AL    BL          CL   CR    
                              CL   CR
3.LR型调整：由于在A的左孩子B(L)的右子树(R)上插入新结点C，使原来平衡二叉树变得不平衡，此时A的平衡因子由1变为2。为了使树达到平衡，将C的左孩子接到B的右子树，将C的右孩子接到A的左子树，再将B和A分别接到C的左右子树。
                   A                                                        C
        B                    AR     ----------->         B                  A
BL           C                                             BL     CL        CR    AR
           CL   CR  
4.RL型调整：由于在A的右孩子B(R)的左子树(L)上插入新结点C，使原来平衡二叉树变得不平衡，此时A的平衡因子由-1变为-2。为了使树达到平衡，将C的左孩子接到A的右子树，将C的有孩子接到B的左子树，再将A和B分别接到C的左右子树。
                A                                                                      C
AL                             B                 ----------->      A                     B
                          C           BR                             AL    CL           CR   BR
                     CL    CR